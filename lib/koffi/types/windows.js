/*
Copyright (c) Anthony Beaumont
This source code is licensed under the MIT License
found in the LICENSE file in the root directory of this source tree.
*/

import { arch } from "node:process";
import koffi from "koffi";

/*
⚠️ The following might be incorrect and / or incomplete.
    Take it with a grain of salt as it is a "written and checked as I need it" kind of thing.
    //Source: https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types?redirectedfrom=MSDN
*/

const _WIN64 = arch === "x64";

export const VOID = koffi.types.void;
export const ENUM = koffi.types.uint32;
export const DWORD = koffi.types.long;
export const WORD = koffi.types.uint16;
export const SHORT = koffi.types.int16;
export const BYTE = koffi.types.uint8;
export const WCHAR = koffi.types.char16;

export const ACCESS_MASK = koffi.types.int32; //https://docs.microsoft.com/en-us/windows/win32/secauthz/access-mask-format
export const ATOM = koffi.types.uint16;
export const PVOID = _WIN64 ? koffi.pointer(koffi.types.uint64) : koffi.pointer(koffi.types.uint32);
export const HANDLE = koffi.opaque();
export const LONG_PTR = _WIN64 ? koffi.pointer(koffi.types.int64) : koffi.pointer(koffi.types.long);
export const ULONG_PTR = _WIN64 ? koffi.pointer(koffi.types.uint64) : koffi.pointer(koffi.types.ulong);

export const BOOL = koffi.types.int;
export const BOOLEAN = koffi.types.bool;
export const CALLBACK = koffi.pointer(koffi.types.void);
export const CCHAR = koffi.types.uint8;
export const CHAR = koffi.types.uint8;
export const COLORREF = DWORD;
export const DWORDLONG = koffi.types.uint64;
export const DWORD_PTR = ULONG_PTR;
export const DWORD32 = koffi.types.uint32;
export const DWORD64 = koffi.types.uint64;
export const FLOAT = koffi.types.float;
export const HACCEL = HANDLE;
export const HALF_PTR = _WIN64 ? koffi.types.int32 : SHORT;
export const HBITMAP = HANDLE;
export const HBRUSH = HANDLE;
export const HCOLORSPACE = HANDLE;
export const HCONV = HANDLE;
export const HCONVLIST = HANDLE;
export const HCURSOR = HANDLE;
export const HDC = HANDLE;
export const HDDEDATA = HANDLE;
export const HDESK = HANDLE;
export const HDROP = HANDLE;
export const HDWP = HANDLE;
export const HENHMETAFILE = HANDLE;
export const HFILE = HANDLE;
export const HFONT = HANDLE;
export const HGDIOBJ = HANDLE;
export const HGLOBAL = HANDLE;
export const HHOOK = HANDLE;
export const HICON = HANDLE;
export const HINSTANCE = HANDLE;
export const HKEY = HANDLE;
export const HKL = HANDLE;
export const HLOCAL = HANDLE;
export const HMENU = HANDLE;
export const HMETAFILE = HANDLE;
export const HMODULE = HINSTANCE;
export const HMONITOR = HANDLE;
export const HPALETTE = HANDLE;
export const HPEN = HANDLE;
export const HRESULT = koffi.types.long;
export const NTSTATUS = koffi.types.long;
export const HRGN = HANDLE;
export const HRSRC = HANDLE;
export const HSZ = HANDLE;
export const HWINEVENTHOOK = HANDLE;
export const HWINSTA = HANDLE;
export const HWND = HANDLE;
export const INT =  koffi.types.int;
export const INT_PTR = _WIN64 ? koffi.types.int64 : koffi.types.int32;
export const INT8 = koffi.types.int8;
export const INT16 = koffi.types.int16;
export const INT32 = koffi.types.int32;
export const INT64 = koffi.types.int64;
export const LANGID = WORD;
export const LCID = DWORD;
export const LCTYPE = DWORD;
export const LGRPID = DWORD;
export const LONG = koffi.types.long;
export const LONGLONG = koffi.types.longlong;
export const LONG32 = koffi.types.int32;
export const LONG64 = koffi.types.int64;
export const LPARAM = LONG_PTR;
export const LPBOOL = BOOL;
export const LPBYTE = koffi.pointer(BYTE);
export const LPCOLORREF = DWORD;
export const LPCSTR = koffi.types.string;
export const LPCTSTR = koffi.types.string16;
export const LPCWSTR = koffi.types.string16;
export const LPVOID = koffi.pointer(koffi.types.void);
export const LPCVOID = LPVOID;
export const LPDWORD = koffi.pointer(koffi.types.uint16);
export const LPHANDLE = _WIN64 ? koffi.pointer(koffi.types.int64) : koffi.pointer(koffi.types.int32);
export const LPINT = koffi.pointer(koffi.types.int);
export const LPLONG = koffi.pointer(koffi.types.int32);
export const LPMSG = koffi.pointer(koffi.types.void);
export const LPPOINT = koffi.pointer(koffi.types.void);
export const LPSTR = koffi.pointer(koffi.types.char);
export const LPWSTR = koffi.pointer(koffi.types.uint16);
export const LPTSTR = koffi.pointer(koffi.types.uint16);
export const LPWORD = koffi.pointer(koffi.types.uint16);
export const LRESULT = LONG_PTR;
export const PBOOL = koffi.pointer(koffi.types.int);
export const PBOOLEAN = koffi.pointer(koffi.types.bool);
export const PBYTE = koffi.pointer(BYTE);
export const PCHAR = koffi.pointer(koffi.types.char);
export const PCSTR = koffi.pointer(koffi.types.uint8);
export const PCTSTR = _WIN64 ? koffi.pointer(koffi.types.int16) : koffi.pointer(koffi.types.int8);
export const PCWSTR = koffi.pointer(koffi.types.uint16);
export const PDWORD = koffi.pointer(koffi.types.uint32);
export const PDWORDLONG = koffi.pointer(koffi.types.uint64);
export const PDWORD_PTR = DWORD_PTR;
export const PDWORD32 = koffi.pointer(koffi.types.uint32);
export const PDWORD64 = koffi.pointer(koffi.types.uint64);
export const PFLOAT = koffi.pointer(koffi.types.float);
export const PHALF_PTR = koffi.pointer(koffi.types.void);
export const PHANDLE = _WIN64 ? koffi.pointer(koffi.pointer(koffi.types.uint64)) : koffi.pointer(koffi.pointer(koffi.types.uint32));
export const PHKEY = _WIN64 ? koffi.pointer(koffi.pointer(koffi.types.uint64)) : koffi.pointer(koffi.pointer(koffi.types.uint32));
export const PINT = koffi.pointer(koffi.types.int);
export const PINT_PTR = koffi.pointer(koffi.pointer(koffi.types.int));
export const PINT8 = koffi.pointer(koffi.types.int8);
export const PINT16 = koffi.pointer(koffi.types.int16);
export const PINT32 = koffi.pointer(koffi.types.int32);
export const PINT64 = koffi.pointer(koffi.types.int64);
export const PLCID = koffi.pointer(koffi.types.uint32);
export const PLONG = koffi.pointer(koffi.types.long);
export const PLONGLONG = koffi.pointer(koffi.types.int64);
export const PLONG_PTR = koffi.pointer(koffi.types.void);
export const PLONG32 = koffi.pointer(koffi.types.int32);
export const PLONG64 = koffi.pointer(koffi.types.int64);
export const POINTER_32 = koffi.pointer(koffi.types.int32);
export const POINTER_64 = _WIN64 ? koffi.pointer(koffi.types.int64) : koffi.pointer(koffi.types.int32);
export const POINTER_SIGNED = koffi.pointer(koffi.types.void);
export const POINTER_UNSIGNED = koffi.pointer(koffi.types.void);
export const PSHORT = koffi.pointer(koffi.types.int16);
export const PSIZE = ULONG_PTR;
export const PSSIZE = koffi.pointer(koffi.types.void);
export const PSTR = koffi.pointer(koffi.types.char);
export const PTBYTE = koffi.pointer(koffi.types.int16);
export const PTCHAR = koffi.pointer(koffi.types.uint16);
export const PTSTR = koffi.pointer(koffi.types.uint16);
export const PUCHAR = koffi.pointer(koffi.types.void)
export const PUHALF_PTR = koffi.pointer(koffi.types.void);
export const PUINT = koffi.pointer(koffi.types.uint);
export const PUINT_PTR = koffi.pointer(koffi.pointer(koffi.types.uint));
export const PUINT8 = koffi.pointer(koffi.types.uint8);
export const PUINT16 = koffi.pointer(koffi.types.uint16);
export const PUINT32 = koffi.pointer(koffi.types.uint32);
export const PUINT64 = koffi.pointer(koffi.types.uint64);
export const PULONG = koffi.pointer(koffi.types.uint);
export const PULONGLONG = koffi.pointer(koffi.types.uint64);
export const PULONG_PTR = koffi.pointer(koffi.pointer(koffi.types.uint64));
export const PULONG32 = koffi.pointer(koffi.types.uint);
export const PULONG64 = koffi.pointer(koffi.types.uint64);
export const PUSHORT = koffi.pointer(koffi.types.uint16);
export const PWCHAR = koffi.pointer(koffi.types.uint16);
export const PWORD = koffi.pointer(koffi.types.uint16);
export const PWSTR = koffi.pointer(koffi.types.uint16);
export const QWORD = koffi.pointer(koffi.types.uint64);
export const SC_HANDLE = HANDLE;
export const SC_LOCK = LPVOID;
export const SERVICE_STATUS_HANDLE = HANDLE;
export const SIZE = ULONG_PTR;
export const SSIZE = LONG_PTR;
export const TBYTE = koffi.types.int16;
export const TCHAR = koffi.types.uint16;
export const UCHAR = koffi.types.uchar;
export const UHALF_PTR = _WIN64 ? koffi.types.uint32 : koffi.types.uint16;
export const UINT = koffi.types.uint;
export const UINT_PTR = _WIN64 ? koffi.types.uint64 : koffi.types.uint32;
export const UINT8 = koffi.types.uint8;
export const UINT16 = koffi.types.uint16;
export const UINT32 = koffi.types.uint32;
export const UINT64 = koffi.types.uint64;
export const ULONG = koffi.types.ulong;
export const ULONGLONG = koffi.types.ulonglong;
export const ULONG32 = koffi.types.uint32;
export const ULONG64 = koffi.types.uint64;
export const USHORT = koffi.types.ushort;
export const USN = LONGLONG;
export const WPARAM = UINT_PTR;